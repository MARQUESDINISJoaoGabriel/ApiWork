openapi: 3.0.0
info:
  title: API Wager
  description: >
    API pour gérer les flags, les postbox (fonctionnalité de type forum),
    le chat en direct, et les sections d'informations utilisateur pour un système 
    similaire à WebSDR.  
    Cette API vise à stocker et récupérer des flags de fréquence, des messages 
    d'utilisateur, des messages de chat, et des données historiques spécifiques aux utilisateurs.
  version: 1.0.0
  contact:
    name: Support de l'API
    email: support@websdr.com
  license:
    name: Apache 2.0
    url: https://www.apache.org/licenses/LICENSE-2.0.html

servers:
  - url: https://api.WebSDR.com/v1
    description: Serveur de production
  - url: http://localhost:3000
    description: Serveur de développement local

tags:
  - name: FLAGS
    description: Gérer les flags et leurs données. Utilisé pour marquer des fréquences spécifiques avec des informations.
  - name: POSTBOX
    description: Fonctionnalité de type forum pour les messages des utilisateurs.
  - name: INFO
    description: Gérer les informations spécifiques aux utilisateurs et leur historique.
  - name: CHAT
    description: Chat en temps réel sur des fréquences spécifiques.
  - name: LIST
    description: Récupérer toutes les données des flags.

paths:
  /flags:
    get:
      tags:
        - LIST
      summary: Récupérer tous les flags
      description: >
        Cet endpoint permet de récupérer une liste de tous les flags disponibles.
        Les flags sont utilisés pour marquer les fréquences avec des informations spécifiques
        comme le nom, la fréquence et la région.
      operationId: getAllFlags
      parameters:
        - in: query
          name: freqMin
          schema:
            type: number
            format: float
            example: 190.00
          description: Filtrer les flags par fréquence minimale (MHz).
        - in: query
          name: freqMax
          schema:
            type: number
            format: float
            example: 597.00
          description: Filtrer les drapeaux par fréquence maximale (MHz).
        - in: query
          name: page
          schema:
            type: integer
            default: 1
            minimum: 1
          description: Numéro de la page pour la pagination.
        - in: query
          name: limit
          schema:
            type: integer
            default: 10
            minimum: 1
          description: Nombre d'éléments par page.
        - in: query
          name: sort
          schema:
            type: string
            enum: [freq, region, nom]
            example: freq
          description: Trier les drapeaux par un champ spécifique (par exemple, 'freq', 'region' ou 'nom').
      responses:
        "200":
          description: Liste des drapeaux
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Flag'
              example:
                - nom: "NRJ"
                  freq: 190
                  region: "Bordeaux, FRANCE"
                - nom: "RockFM"
                  freq: 250
                  region: "Lyon, FRANCE"
        "400":
          description: Paramètres de requête invalides
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

    put:
      tags:
        - FLAGS
      summary: Créer ou mettre à jour un drapeau
      description: >
        Créer un nouveau drapeau ou mettre à jour un drapeau existant en fonction de la propriété `nom` (nom unique).  
        Si le drapeau existe déjà, ses valeurs (`freq`, `region`) seront mises à jour.
      operationId: createOrUpdateFlag
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Flag'
            example:
              nom: "NRJ"
              freq: 190.00
              region: "Bordeaux, FRANCE"
      responses:
        "200":
          description: Drapeau créé ou mis à jour avec succès
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Flag'
              example:
                nom: "NRJ"
                freq: 190.00
                region: "Bordeaux, FRANCE"
        "400":
          description: Données d'entrée invalides
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        "401":
          description: Non autorisé (token Bearer manquant ou invalide)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        "500":
          description: Erreur interne du serveur
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

    post:
      tags:
        - FLAGS
      summary: Ajouter un nouveau drapeau (exclusif)
      description: >
        Permet d'ajouter un nouveau drapeau **uniquement** s'il n'existe pas déjà.
        Si le `nom` est déjà présent, l'API renvoie une erreur.
      operationId: createFlagExclusive
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Flag'
            example:
              nom: "JoaoFM"
              freq: 222.22
              region: "Lisbonne, PORTUGAL"
      responses:
        "201":
          description: Nouveau drapeau ajouté avec succès
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Flag'
              example:
                nom: "JoaoFM"
                freq: 222.22
                region: "Lisbonne, PORTUGAL"
        "409":
          description: Conflit - Un drapeau avec ce nom existe déjà
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                code: 409
                message: "Le drapeau existe déjà."
        "400":
          description: Requête invalide
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        "401":
          description: Non autorisé
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

    patch:
      tags:
        - FLAGS
      summary: Mise à jour partielle d'un drapeau
      description: >
        Met à jour **certaines** propriétés d'un drapeau existant.  
        Par exemple, on peut vouloir changer uniquement la région ou la fréquence.
      operationId: patchFlag
      security:
        - BearerAuth: []
      parameters:
        - in: query
          name: nom
          schema:
            type: string
            example: "NRJ"
          required: true
          description: Nom unique du drapeau à mettre à jour.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                freq:
                  type: number
                  format: float
                  example: 195.55
                  description: Nouvelle fréquence
                region:
                  type: string
                  example: "Paris, FRANCE"
                  description: Nouvelle région
            example:
              freq: 195.55
              region: "Paris, FRANCE"
      responses:
        "200":
          description: Drapeau mis à jour partiellement avec succès
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Flag'
              example:
                nom: "NRJ"
                freq: 195.55
                region: "Paris, FRANCE"
        "400":
          description: Paramètres invalides ou corps de requête vide
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        "401":
          description: Non autorisé
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        "404":
          description: Drapeau introuvable
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

    delete:
      tags:
        - FLAGS
      summary: Supprimer un drapeau
      description: >
        Supprimer un drapeau spécifique en fonction de son nom.
        Peut également supprimer tous les drapeaux si aucun nom n'est fourni
        (selon logique d'implémentation).
      operationId: deleteFlag
      security:
        - BearerAuth: []
      parameters:
        - in: query
          name: nom
          schema:
            type: string
            example: "RockFM"
          description: Nom du drapeau à supprimer. 
      responses:
        "204":
          description: Drapeau supprimé (ou tous les drapeaux supprimés) avec succès
        "401":
          description: Non autorisé
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        "404":
          description: Drapeau introuvable
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        "500":
          description: Erreur interne
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /postbox:
    get:
      tags:
        - POSTBOX
      summary: Récupérer tous les messages
      description: Récupérer tous les messages de type forum depuis la postbox.
      operationId: getPosts
      parameters:
        - in: query
          name: user
          schema:
            type: string
          description: Filtrer les messages par nom d'utilisateur.
        - in: query
          name: date
          schema:
            type: string
            format: date
          description: Filtrer les messages par une date spécifique.
      responses:
        "200":
          description: Liste des messages
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Post'
              example:
                - nom_user: "S7VenStars"
                  date_post: "2025-01-28"
                  titre: "Etranges Frequences sur ..."
                  contenu: "Découverte d'une station inconnue."
                - nom_user: "JaneDoe"
                  date_post: "2025-01-28"
                  titre: "Question sur la modulation"
                  contenu: "Quelqu'un a déjà capté ... ?"

    post:
      tags:
        - POSTBOX
      summary: Créer un nouveau message
      description: Créer un nouveau message dans la boîte de messages de type forum.
      operationId: createPost
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Post'
            example:
              nom_user: "S7VenStars"
              date_post: "2025-01-28"
              titre: "Etranges Frequences sur ..."
              contenu: "........"
      responses:
        "201":
          description: Message créé avec succès
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Post'
        "400":
          description: Corps de requête invalide
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        "401":
          description: Non autorisé (token Bearer manquant ou invalide)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        "500":
          description: Erreur interne du serveur
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  
    put:
      tags:
        - POSTBOX
      summary: Mettre à jour entièrement un message
      description: >
        Met à jour entièrement un post existant en l'identifiant par son titre ou son auteur.  
        Exemple : changer le contenu, le titre, etc.
      operationId: updatePostFully
      security:
        - BearerAuth: []
      parameters:
        - in: query
          name: titre
          schema:
            type: string
            example: "Etranges Frequences sur ..."
          description: Titre du post à mettre à jour.
        - in: query
          name: user
          schema:
            type: string
            example: "JaneDoe"
          description: Nom de l'utilisateur ayant créé le post.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Post'
            example:
              nom_user: "JaneDoe"
              date_post: "2025-02-01"
              titre: "Nouvelle découverte"
              contenu: "Grosse mise à jour de mon post..."
      responses:
        "200":
          description: Post mis à jour avec succès
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Post'
        "400":
          description: Erreur de validation ou de paramètres
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        "401":
          description: Non autorisé
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        "404":
          description: Post introuvable
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

    patch:
      tags:
        - POSTBOX
      summary: Mise à jour partielle d'un message
      description: >
        Permet de modifier partiellement un message, par exemple seulement le contenu ou seulement le titre.
      operationId: patchPost
      security:
        - BearerAuth: []
      parameters:
        - in: query
          name: titre
          schema:
            type: string
            example: "Etranges Frequences sur ..."
          required: true
          description: Titre du post à modifier.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                titre:
                  type: string
                  example: "Titre modifié"
                contenu:
                  type: string
                  example: "J'ai juste édité le contenu partiellement."
      responses:
        "200":
          description: Post mis à jour partiellement
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Post'
        "400":
          description: Erreur de validation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        "401":
          description: Non autorisé
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        "404":
          description: Post introuvable
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

    delete:
      tags:
        - POSTBOX
      summary: Supprimer un ou plusieurs messages
      description: >
        Permet de supprimer un message précis selon son titre ou
        de supprimer tous les messages d'un utilisateur spécifique.
      operationId: deletePost
      security:
        - BearerAuth: []
      parameters:
        - in: query
          name: titre
          schema:
            type: string
            example: "Nouvelle découverte"
          description: Titre du post à supprimer.
        - in: query
          name: user
          schema:
            type: string
            example: "Bobo"
          description: Nom d'utilisateur pour supprimer tous ses posts.
      responses:
        "204":
          description: Message(s) supprimé(s) avec succès
        "401":
          description: Non autorisé
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        "404":
          description: Post introuvable
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /info:
    get:
      tags:
        - INFO
      summary: Récupérer les informations utilisateur
      description: >
        Récupérer les informations de profil et l'historique d'écoute pour un utilisateur spécifique.
      operationId: getUserInfo
      parameters:
        - in: query
          name: user
          schema:
            type: string
          description: Nom d'utilisateur pour lequel récupérer les informations.
          required: true
      responses:
        "200":
          description: Informations utilisateur récupérées
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Info'
              example:
                nom_user: "S7VenStars"
                date_creation: "2025-01-28"
                historique:
                  - flag: "NRJ"
                    date: "2025-01-27"
                  - flag: "RockFM"
                    date: "2025-01-28"
        "404":
          description: Utilisateur introuvable
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

    delete:
      tags:
        - INFO
      summary: Supprimer les informations utilisateur
      description: Supprimer toutes les informations enregistrées pour un utilisateur donné.
      operationId: deleteUserInfo
      security:
        - BearerAuth: []
      parameters:
        - in: query
          name: user
          schema:
            type: string
          description: Nom d'utilisateur pour lequel supprimer les informations.
          required: true
      responses:
        "204":
          description: Informations utilisateur supprimées
        "401":
          description: Non autorisé (token Bearer manquant ou invalide)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        "404":
          description: Utilisateur introuvable
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        "500":
          description: Erreur interne du serveur
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

    post:
      tags:
        - INFO
      summary: Créer une nouvelle info utilisateur
      description: >
        Ajouter un enregistrement d'information pour un nouvel utilisateur.  
        Si l'utilisateur existe déjà, renvoie une erreur ou met à jour selon la logique choisie.
      operationId: createUserInfo
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Info'
            example:
              nom_user: "Bobo"
              date_creation: "2025-01-30"
              historique:
                - flag: "RadioLibre"
                  date: "2025-01-30"
      responses:
        "201":
          description: Informations utilisateur créées
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Info'
        "400":
          description: Corps de requête invalide
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        "401":
          description: Non autorisé
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

    put:
      tags:
        - INFO
      summary: Mettre à jour ou remplacer les infos utilisateur
      description: >
        Mettre à jour **toutes** les infos d'un utilisateur.  
        Si l'utilisateur n'existe pas, on peut choisir de le créer ou de retourner une erreur.
      operationId: updateUserInfo
      security:
        - BearerAuth: []
      parameters:
        - in: query
          name: user
          schema:
            type: string
            example: "Bobo"
          required: true
          description: Nom d'utilisateur ciblé.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Info'
            example:
              nom_user: "Bobo"
              date_creation: "2025-01-31"
              historique:
                - flag: "ChaineDuRock"
                  date: "2025-01-31"
                - flag: "JazzStation"
                  date: "2025-02-01"
      responses:
        "200":
          description: Informations utilisateur mises à jour
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Info'
        "400":
          description: Erreur de validation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        "401":
          description: Non autorisé
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        "404":
          description: Utilisateur introuvable (selon la logique d'implémentation)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

    patch:
      tags:
        - INFO
      summary: Mise à jour partielle des infos utilisateur
      description: >
        Permet de modifier seulement certaines propriétés de l'info utilisateur (par exemple, ajouter un nouvel historique).
      operationId: patchUserInfo
      security:
        - BearerAuth: []
      parameters:
        - in: query
          name: user
          schema:
            type: string
            example: "Bobo"
          required: true
          description: Nom d'utilisateur à modifier.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                date_creation:
                  type: string
                  format: date
                  example: "2025-01-29"
                historique:
                  type: array
                  items:
                    type: object
                    properties:
                      flag:
                        type: string
                        example: "JoaoFM"
                      date:
                        type: string
                        format: date
                        example: "2025-02-01"
      responses:
        "200":
          description: Informations partiellement mises à jour
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Info'
        "400":
          description: Erreur de validation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        "401":
          description: Non autorisé
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        "404":
          description: Utilisateur introuvable
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'


  /chat:
    get:
      tags:
        - CHAT
      summary: Récupérer les messages de chat
      description: >
        Obtenir les messages de chat les plus récents. Peut être filtré par fréquence ou utilisateur si nécessaire.
      operationId: getChatMessages
      parameters:
        - in: query
          name: frequency
          schema:
            type: number
            format: float
          description: Filtrer les messages de chat par fréquence (MHz).
        - in: query
          name: user
          schema:
            type: string
          description: Filtrer les messages de chat par nom d'utilisateur.
      responses:
        "200":
          description: Messages de chat récupérés
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Chat'
              example:
                - nom_user: "S7VenStars"
                  date: "2025-01-28T15:56:00Z"
                  contenu: "Wow!"
                - nom_user: "JaneDoe"
                  date: "2025-01-28T15:57:00Z"
                  contenu: "Tu captes quoi sur 250 MHz ?"

    put:
      tags:
        - CHAT
      summary: Envoyer un nouveau message de chat
      description: Ajouter un nouveau message de chat en temps réel sur une fréquence spécifique.
      operationId: sendChatMessage
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Chat'
            example:
              nom_user: "S7VenStars"
              date: "2025-01-28T15:56:00Z"
              contenu: "Wow!"
      responses:
        "201":
          description: Message de chat envoyé avec succès
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Chat'
        "400":
          description: Corps de requête invalide
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        "401":
          description: Non autorisé (token Bearer manquant ou invalide)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        "500":
          description: Erreur interne du serveur
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

    post:
      tags:
        - CHAT
      summary: Publier un message de chat (autre variante)
      description: >
        Une variante de l'envoi de message de chat, qui crée toujours un nouveau message
        plutôt que de fusionner si un message similaire existe déjà.
      operationId: postChatMessage
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Chat'
            example:
              nom_user: "Bobo"
              date: "2025-02-02T12:30:00Z"
              contenu: "Salut, c'est moi Bobo!"
      responses:
        "201":
          description: Message de chat publié
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Chat'
        "400":
          description: Corps de requête invalide
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        "401":
          description: Non autorisé
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

    patch:
      tags:
        - CHAT
      summary: Modifier partiellement un message de chat
      description: >
        Permet de modifier le contenu ou la date d'un message de chat spécifiquement.
      operationId: patchChatMessage
      security:
        - BearerAuth: []
      parameters:
        - in: query
          name: nom_user
          schema:
            type: string
            example: "Bobo"
          description: Nom d'utilisateur auteur du message à modifier.
        - in: query
          name: date
          schema:
            type: string
            format: date-time
            example: "2025-02-02T12:30:00Z"
          description: Date précise du message à modifier.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                contenu:
                  type: string
                  example: "Je corrige mon message."
                date:
                  type: string
                  format: date-time
                  example: "2025-02-02T12:40:00Z"
      responses:
        "200":
          description: Message de chat modifié
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Chat'
        "400":
          description: Requête invalide
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        "401":
          description: Non autorisé
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        "404":
          description: Message introuvable
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

    delete:
      tags:
        - CHAT
      summary: Supprimer un message de chat
      description: >
        Supprime un ou plusieurs messages de chat selon le nom d'utilisateur et/ou la date du message.
      operationId: deleteChatMessage
      security:
        - BearerAuth: []
      parameters:
        - in: query
          name: nom_user
          schema:
            type: string
            example: "Bobo"
          description: Nom d'utilisateur auteur du (des) message(s).
        - in: query
          name: date
          schema:
            type: string
            format: date-time
            example: "2025-02-02T12:30:00Z"
          description: Date précise du message à supprimer.
      responses:
        "204":
          description: Message(s) supprimé(s) avec succès
        "401":
          description: Non autorisé
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        "404":
          description: Message introuvable
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        "500":
          description: Erreur interne
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    Flag:
      type: object
      required:
        - nom
        - freq
        - region
      properties:
        nom:
          type: string
          description: Nom unique/identifiant pour la station ou le drapeau.
          example: "NRJ"
        freq:
          type: number
          format: float
          example: 190.00
          description: "Fréquence en MHz"
        region:
          type: string
          description: Région géographique ou ville/pays de la station.
          example: "Bordeaux, FRANCE"

    Post:
      type: object
      required:
        - nom_user
        - date_post
        - titre
        - contenu
      properties:
        nom_user:
          type: string
          description: Nom d'utilisateur de l'auteur du message.
          example: "S7VenStars"
        date_post:
          type: string
          format: date
          description: Date de création du message.
          example: "2025-01-28"
        titre:
          type: string
          description: Titre du message.
          example: "Etranges Frequences sur ..."
        contenu:
          type: string
          description: Corps/contenu du message.
          example: "........"

    Chat:
      type: object
      required:
        - nom_user
        - date
        - contenu
      properties:
        nom_user:
          type: string
          description: Nom d'utilisateur de l'auteur du message de chat.
          example: "S7VenStars"
        date:
          type: string
          format: date-time
          description: Horodatage du message, au format ISO 8601.
          example: "2025-01-28T15:56:00Z"
        contenu:
          type: string
          description: Contenu du message de chat.
          example: "Wow!"

    Info:
      type: object
      required:
        - nom_user
        - date_creation
      properties:
        nom_user:
          type: string
          description: Nom d'utilisateur pour lequel ces informations sont enregistrées.
          example: "S7VenStars"
        date_creation:
          type: string
          format: date
          description: Date à laquelle cet utilisateur a été créé dans le système.
          example: "2025-01-28"
        historique:
          type: array
          description: Historique des drapeaux écoutés par l'utilisateur, avec la date d'écoute.
          items:
            type: object
            properties:
              flag:
                type: string
                description: Nom du drapeau ou de la station écoutée.
                example: "NRJ"
              date:
                type: string
                format: date
                description: Date à laquelle l'utilisateur a écouté cette station.
                example: "2025-01-27"

    Error:
      type: object
      properties:
        code:
          type: integer
          example: 400
        message:
          type: string
          example: "Paramètres de requête invalides"
