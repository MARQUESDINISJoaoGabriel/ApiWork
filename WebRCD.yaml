openapi: 3.0.0
info:
  title: API Wager
  description: >
    API pour gérer les flags, les postbox (fonctionnalité de type forum),
    le chat en direct, et les sections d'informations utilisateur pour un système 
    similaire à WebSDR.  
    Cette API vise à stocker et récupérer des flags de fréquence, des messages 
    d'utilisateur, des messages de chat, et des données historiques spécifiques aux utilisateurs.
  version: 1.0.0
  contact:
    name: Support de l'API
    email: support@websdr.com
  license:
    name: Apache 2.0
    url: https://www.apache.org/licenses/LICENSE-2.0.html

servers:
  - url: https://api.WebSDR.com/v1
    description: Serveur de production
  - url: http://localhost:3000
    description: Serveur de développement local

tags:
  - name: FLAGS
    description: Gérer les flags et leurs données. Utilisé pour marquer des fréquences spécifiques avec des informations.
  - name: POSTBOX
    description: Fonctionnalité de type forum pour les messages des utilisateurs.
  - name: INFO
    description: Gérer les informations spécifiques aux utilisateurs et leur historique.
  - name: CHAT
    description: Chat en temps réel sur des fréquences spécifiques.
  - name: LIST
    description: Récupérer toutes les données des flags.

paths:
  /flags:
    get:
      tags:
        - LIST
      summary: Récupérer tous les flags
      description: >
        Cet endpoint permet de récupérer une liste de tous les flags disponibles.
        Les flags sont utilisés pour marquer les fréquences avec des informations spécifiques
        comme le nom, la fréquence et la région.
      operationId: getAllFlags
      parameters:
        - in: query
          name: freqMin
          schema:
            type: number
            format: float
            example: 190.00
          description: Filtrer les flags par fréquence minimale (MHz).
        - in: query
          name: freqMax
          schema:
            type: number
            format: float
            example: 597.00
          description: Filtrer les drapeaux par fréquence maximale (MHz).
        - in: query
          name: page
          schema:
            type: integer
            default: 1
            minimum: 1
          description: Numéro de la page pour la pagination.
        - in: query
          name: limit
          schema:
            type: integer
            default: 10
            minimum: 1
          description: Nombre d'éléments par page.
        - in: query
          name: sort
          schema:
            type: string
            enum: [freq, region, nom]
            example: freq
          description: Trier les drapeaux par un champ spécifique (par exemple, 'freq', 'region' ou 'nom').
      responses:
        "200":
          description: Liste des drapeaux
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Flag'
              example:
                - nom: "NRJ"
                  freq: 190
                  region: "Bordeaux, FRANCE"
                - nom: "RockFM"
                  freq: 250
                  region: "Lyon, FRANCE"
        "400":
          description: Paramètres de requête invalides
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

    put:
      tags:
        - FLAGS
      summary: Créer ou mettre à jour un drapeau
      description: >
        Créer un nouveau drapeau ou mettre à jour un drapeau existant en fonction de la propriété `nom` (nom unique).  
        Si le drapeau existe déjà, ses valeurs (`freq`, `region`) seront mises à jour.
      operationId: createOrUpdateFlag
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Flag'
            example:
              nom: "NRJ"
              freq: 190.00
              region: "Bordeaux, FRANCE"
      responses:
        "200":
          description: Drapeau créé ou mis à jour avec succès
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Flag'
              example:
                nom: "NRJ"
                freq: 190.00
                region: "Bordeaux, FRANCE"
        "400":
          description: Données d'entrée invalides
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        "401":
          description: Non autorisé (token Bearer manquant ou invalide)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        "500":
          description: Erreur interne du serveur
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /postbox:
    get:
      tags:
        - POSTBOX
      summary: Récupérer tous les messages
      description: Récupérer tous les messages de type forum depuis la postbox.
      operationId: getPosts
      parameters:
        - in: query
          name: user
          schema:
            type: string
          description: Filtrer les messages par nom d'utilisateur.
        - in: query
          name: date
          schema:
            type: string
            format: date
          description: Filtrer les messages par une date spécifique.
      responses:
        "200":
          description: Liste des messages
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Post'
              example:
                - nom_user: "S7VenStars"
                  date_post: "2025-01-28"
                  titre: "Etranges Frequences sur ..."
                  contenu: "Découverte d'une station inconnue."
                - nom_user: "Joao"
                  date_post: "2025-01-28"
                  titre: "Question sur la modulation"
                  contenu: "Quelqu'un a déjà capté ... ?"

    post:
      tags:
        - POSTBOX
      summary: Créer un nouveau message
      description: Créer un nouveau message dans la boîte de messages de type forum.
      operationId: createPost
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Post'
            example:
              nom_user: "S7VenStars"
              date_post: "2025-01-28"
              titre: "Etranges Frequences sur ..."
              contenu: "........"
      responses:
        "201":
          description: Message créé avec succès
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Post'
        "400":
          description: Corps de requête invalide
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        "401":
          description: Non autorisé (token Bearer manquant ou invalide)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        "500":
          description: Erreur interne du serveur
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /info:
    get:
      tags:
        - INFO
      summary: Récupérer les informations utilisateur
      description: >
        Récupérer les informations de profil et l'historique d'écoute pour un utilisateur spécifique.
      operationId: getUserInfo
      parameters:
        - in: query
          name: user
          schema:
            type: string
          description: Nom d'utilisateur pour lequel récupérer les informations.
          required: true
      responses:
        "200":
          description: Informations utilisateur récupérées
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Info'
              example:
                nom_user: "S7VenStars"
                date_creation: "2025-01-28"
                historique:
                  - flag: "NRJ"
                    date: "2025-01-27"
                  - flag: "RockFM"
                    date: "2025-01-28"
        "404":
          description: Utilisateur introuvable
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

    delete:
      tags:
        - INFO
      summary: Supprimer les informations utilisateur
      description: Supprimer toutes les informations enregistrées pour un utilisateur donné.
      operationId: deleteUserInfo
      security:
        - BearerAuth: []
      parameters:
        - in: query
          name: user
          schema:
            type: string
          description: Nom d'utilisateur pour lequel supprimer les informations.
          required: true
      responses:
        "204":
          description: Informations utilisateur supprimées
        "401":
          description: Non autorisé (token Bearer manquant ou invalide)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        "404":
          description: Utilisateur introuvable
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        "500":
          description: Erreur interne du serveur
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /chat:
    get:
      tags:
        - CHAT
      summary: Récupérer les messages de chat
      description: >
        Obtenir les messages de chat les plus récents. Peut être filtré par fréquence ou utilisateur si nécessaire.
      operationId: getChatMessages
      parameters:
        - in: query
          name: frequency
          schema:
            type: number
            format: float
          description: Filtrer les messages de chat par fréquence (MHz).
        - in: query
          name: user
          schema:
            type: string
          description: Filtrer les messages de chat par nom d'utilisateur.
      responses:
        "200":
          description: Messages de chat récupérés
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Chat'
              example:
                - nom_user: "S7VenStars"
                  date: "2025-01-28T15:56:00Z"
                  contenu: "Wow!"
                - nom_user: "Joao"
                  date: "2025-01-28T15:57:00Z"
                  contenu: "Tu captes quoi sur 250 MHz ?"

    put:
      tags:
        - CHAT
      summary: Envoyer un nouveau message de chat
      description: Ajouter un nouveau message de chat en temps réel sur une fréquence spécifique.
      operationId: sendChatMessage
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Chat'
            example:
              nom_user: "S7VenStars"
              date: "2025-01-28T15:56:00Z"
              contenu: "Wow!"
      responses:
        "201":
          description: Message de chat envoyé avec succès
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Chat'
        "400":
          description: Corps de requête invalide
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        "401":
          description: Non autorisé (token Bearer manquant ou invalide)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        "500":
          description: Erreur interne du serveur
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    Flag:
      type: object
      required:
        - nom
        - freq
        - region
      properties:
        nom:
          type: string
          description: Nom unique/identifiant pour la station ou le drapeau.
          example: "NRJ"
        freq:
          type: number
          format: float
          example: 190.00
        region:
          type: string
          description: Région géographique ou ville/pays de la station.
          example: "Bordeaux, FRANCE"

    Post:
      type: object
      required:
        - nom_user
        - date_post
        - titre
        - contenu
      properties:
        nom_user:
          type: string
          description: Nom d'utilisateur de l'auteur du message.
          example: "S7VenStars"
        date_post:
          type: string
          format: date
          description: Date de création du message.
          example: "2025-01-28"
        titre:
          type: string
          description: Titre du message.
          example: "Etranges Frequences sur ..."
        contenu:
          type: string
          description: Corps/contenu du message.
          example: "........"

    Chat:
      type: object
      required:
        - nom_user
        - date
        - contenu
      properties:
        nom_user:
          type: string
          description: Nom d'utilisateur de l'auteur du message de chat.
          example: "S7VenStars"
        date:
          type: string
          format: date-time
          description: Horodatage du message, au format ISO 8601.
          example: "2025-01-28T15:56:00Z"
        contenu:
          type: string
          description: Contenu du message de chat.
          example: "Wow!"

    Info:
      type: object
      required:
        - nom_user
        - date_creation
      properties:
        nom_user:
          type: string
          description: Nom d'utilisateur pour lequel ces informations sont enregistrées.
          example: "S7VenStars"
        date_creation:
          type: string
          format: date
          description: Date à laquelle cet utilisateur a été créé dans le système.
          example: "2025-01-28"
        historique:
          type: array
          description: Historique des drapeaux écoutés par l'utilisateur, avec la date d'écoute.
          items:
            type: object
            properties:
              flag:
                type: string
                description: Nom du drapeau ou de la station écoutée.
                example: "NRJ"
              date:
                type: string
                format: date
                description: Date à laquelle l'utilisateur a écouté cette station.
                example: "2025-01-27"

    Error:
      type: object
      properties:
        code:
          type: integer
          example: 400
        message:
          type: string
          example: "Paramètres de requête invalides"